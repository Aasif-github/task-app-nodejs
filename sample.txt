User Registration:
Method:POST
http://localhost:3000/registration
{
    "name":"Mike",
    "email":"Mike@gmail.com",
    "password":"12345"
}

========
Output:
{
    "userSaved": {
        "name": "Mike",
        "email": "mike@gmail.com",
        "password": "$2a$08$pB9nWTd6G.x4n7Yc4doVbuFUB5lG32zg4gb8s0vVUCdk3UtsIpXa6",
        "_id": "65d488116226c6147b4ca5d2",
        "tokens": [
            {
                "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NWQ0ODgxMTYyMjZjNjE0N2I0Y2E1ZDIiLCJpYXQiOjE3MDg0MjcyODEsImV4cCI6MTcwODQ2MzI4MX0.UuZA3PLsE2lYmkzJqS2w11r3_oMcOmcmftkwhuR6OIs",
                "_id": "65d488116226c6147b4ca5d4"
            }
        ],
        "__v": 1
    },
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NWQ0ODgxMTYyMjZjNjE0N2I0Y2E1ZDIiLCJpYXQiOjE3MDg0MjcyODEsImV4cCI6MTcwODQ2MzI4MX0.UuZA3PLsE2lYmkzJqS2w11r3_oMcOmcmftkwhuR6OIs"
}
===============================================
 --------------------Logout---------------
 
const express = require('express');
const jwt = require('jsonwebtoken');

const app = express();
const secretKey = 'your_secret_key';

// In-memory blacklist
const tokenBlacklist = new Set();

// Middleware to check if the token is blacklisted
function checkTokenBlacklist(req, res, next) {
  const token = req.header('Authorization');

  if (token && tokenBlacklist.has(token)) {
    return res.status(401).json({ error: 'Token revoked. Please log in again.' });
  }

  next();
}

// Endpoint for user logout
app.post('/logout', (req, res) => {
  const token = req.header('Authorization');

  if (!token) {
    return res.status(400).json({ error: 'Token not provided.' });
  }

  // Add the token to the blacklist
  tokenBlacklist.add(token);

  res.json({ message: 'Logout successful.' });
});

// Example protected route (requires valid token)
app.get('/protected', checkTokenBlacklist, (req, res) => {
  res.json({ message: 'Protected route accessed successfully.' });
});

app.listen(3000, () => {
  console.log('Server is running on port 3000');
});

==================================

Sample - used to logout () // just use filter  and return un-match token. and save it in db.

 tokens = [{token:1,_id:12},{token:2,_id:12},{token:3,_id:12},{token:4,_id:12}];
 token = 2;
 
 tokens = tokens.filter((tokObj)=>{
     return tokObj.token !== token;
 })
 
 console.log(tokens); // [ { token: 1, _id: 12 }, { token: 3, _id: 12 }, { token: 4, _id: 12 } ]

================================================================
# what are the modules of  task manager app
--------------------------------------------

The modules of a task manager app can vary based on its features and functionalities. However, here are some common modules you might find in a task manager app:

User Authentication:

Registration: Allowing users to create accounts.
Login: Authenticating users to access their tasks.
Task Management:

Create Task: Allowing users to add new tasks.
View Task List: Displaying a list of tasks.
Update Task: Allowing users to modify task details.
Delete Task: Removing tasks from the list.
Task Categories/Labels: Organizing tasks into categories.
User Profile:

View Profile: Displaying user information.
Edit Profile: Allowing users to update their profile details.
Change Password: Providing an option to change the password.
Notifications:

Task Reminders: Setting reminders for upcoming tasks.
Email/SMS Notifications: Notifying users about task updates.
Collaboration:

Task Sharing: Allowing users to share tasks with others.
Comments/Notes: Adding comments or notes to tasks.
Search and Filtering:

Search Tasks: Enabling users to search for specific tasks.
Filter Tasks: Sorting tasks based on different criteria.
Settings:

Theme Selection: Allowing users to choose app themes.
Notification Preferences: Customizing notification settings.
Security:

Access Control: Managing user roles and permissions.
Secure Authentication: Implementing secure login mechanisms.
Reports and Analytics:

Task Completion Statistics: Providing insights into completed tasks.
Productivity Reports: Analyzing user productivity.
Sync Across Devices:

Cloud Integration: Synchronizing tasks across multiple devices.
Backup and Restore:

Data Backup: Allowing users to backup their task data.
Restore: Restoring data from backups.
Integration with External Tools:

Calendar Integration: Syncing tasks with calendar apps.
Third-Party App Integration: Connecting with other productivity tools.
Feedback and Support:

Feedback Form: Collecting user feedback.
Help and Support: Providing user assistance.
These modules can be implemented as separate components or functionalities within the task manager app. The choice of modules depends on the specific requirements and goals of the app.

====================================================

Admin will assign task to users
- there will two type of user ie (Admin and User)

1. No user will get more the two task.
2. Only login user can view his account.

=====================================================
npm i dotenv
===========================================================================

# where we use  cookie in nodejs

In Node.js, cookies are commonly used to store small pieces of information on the client side, allowing the server to maintain state across multiple requests. Cookies are often used for authentication, session management, and tracking user preferences. Here are some common use cases for cookies in Node.js:

Session Management:
Cookies are often used to manage user sessions. When a user logs in, the server can set a session cookie on the client side, which is then sent with each subsequent request. This allows the server to identify and maintain the user's session.

Authentication:
Cookies are commonly used for authentication purposes. After a successful login, the server can set an authentication cookie on the client side. This cookie can contain information like a user ID or a token that the server can use to identify and authenticate the user in subsequent requests.

Remember Me Functionality:
For websites that offer a "Remember Me" option during login, cookies are used to store a persistent session identifier on the client side. This allows users to stay logged in across multiple sessions or even after closing and reopening the browser.

Tracking User Preferences:
Cookies can be used to store user preferences or settings. For example, a website might store a user's language preference or theme choice in a cookie so that the website can provide a personalized experience.

Analytics and Tracking:
Cookies are commonly used for tracking user behavior and collecting analytics data. Services like Google Analytics use cookies to track user interactions on websites.

In Node.js, you can work with cookies using various libraries such as express, cookie-parser, or cookie. The express framework, for example, has built-in support for handling cookies.

Here's a simple example using the express framework and the cookie-parser middleware to set and read cookies:

javascript
Copy code
const express = require('express');
const cookieParser = require('cookie-parser');

const app = express();
app.use(cookieParser());

app.get('/', (req, res) => {
  // Set a cookie
  res.cookie('user', 'john_doe', { maxAge: 900000, httpOnly: true });

  // Read a cookie
  const userCookie = req.cookies.user;
  console.log('User Cookie:', userCookie);

  res.send('Cookie example');
});

app.listen(3000, () => {
  console.log('Server is running on port 3000');
});
In this example, the server sets a cookie named 'user' with the value 'john_doe' and a maximum age of 900,000 milliseconds (15 minutes). The server also reads the 'user' cookie from the incoming request, demonstrating how to retrieve and use cookies in Node.js.



==========================================
Testing 
When we assign task to any user.

 task/AssignTaskToUser route
 1. check type admin . Only admin can assign task to user.
 2. 


#
Add Task

Method : POST

Request URI: http://localhost:3000/task/add

Authorization Token 
Type Bearer: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NWRjMzViY2EzZmFiOGZlMzY3YTYwM2EiLCJpYXQiOjE3MDk3MjIyNDIsImV4cCI6MTcwOTk4MTQ0Mn0.A6PndjmFJthPTs7wR2CFg251oI7Llfew9JPhNbI_3Ng

Request

````json

{
    "description":"Task-17",
    "completed": true,
    "assignedUser":"65dc5e84bd2eeec795ce36a8"
}

````

Response : 401 Unauthorized

````json

{
    "msg": "Unauthorized User Type"
}

`````