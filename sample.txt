User Registration:
Method:POST
http://localhost:3000/registration
{
    "name":"Mike",
    "email":"Mike@gmail.com",
    "password":"12345"
}

========
Output:
{
    "userSaved": {
        "name": "Mike",
        "email": "mike@gmail.com",
        "password": "$2a$08$pB9nWTd6G.x4n7Yc4doVbuFUB5lG32zg4gb8s0vVUCdk3UtsIpXa6",
        "_id": "65d488116226c6147b4ca5d2",
        "tokens": [
            {
                "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NWQ0ODgxMTYyMjZjNjE0N2I0Y2E1ZDIiLCJpYXQiOjE3MDg0MjcyODEsImV4cCI6MTcwODQ2MzI4MX0.UuZA3PLsE2lYmkzJqS2w11r3_oMcOmcmftkwhuR6OIs",
                "_id": "65d488116226c6147b4ca5d4"
            }
        ],
        "__v": 1
    },
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NWQ0ODgxMTYyMjZjNjE0N2I0Y2E1ZDIiLCJpYXQiOjE3MDg0MjcyODEsImV4cCI6MTcwODQ2MzI4MX0.UuZA3PLsE2lYmkzJqS2w11r3_oMcOmcmftkwhuR6OIs"
}
===============================================
 --------------------Logout---------------
 
const express = require('express');
const jwt = require('jsonwebtoken');

const app = express();
const secretKey = 'your_secret_key';

// In-memory blacklist
const tokenBlacklist = new Set();

// Middleware to check if the token is blacklisted
function checkTokenBlacklist(req, res, next) {
  const token = req.header('Authorization');

  if (token && tokenBlacklist.has(token)) {
    return res.status(401).json({ error: 'Token revoked. Please log in again.' });
  }

  next();
}

// Endpoint for user logout
app.post('/logout', (req, res) => {
  const token = req.header('Authorization');

  if (!token) {
    return res.status(400).json({ error: 'Token not provided.' });
  }

  // Add the token to the blacklist
  tokenBlacklist.add(token);

  res.json({ message: 'Logout successful.' });
});

// Example protected route (requires valid token)
app.get('/protected', checkTokenBlacklist, (req, res) => {
  res.json({ message: 'Protected route accessed successfully.' });
});

app.listen(3000, () => {
  console.log('Server is running on port 3000');
});

==================================

Sample - used to logout () // just use filter  and return un-match token. and save it in db.

 tokens = [{token:1,_id:12},{token:2,_id:12},{token:3,_id:12},{token:4,_id:12}];
 token = 2;
 
 tokens = tokens.filter((tokObj)=>{
     return tokObj.token !== token;
 })
 
 console.log(tokens); // [ { token: 1, _id: 12 }, { token: 3, _id: 12 }, { token: 4, _id: 12 } ]

================================================================
# what are the modules of  task manager app
--------------------------------------------

The modules of a task manager app can vary based on its features and functionalities. However, here are some common modules you might find in a task manager app:

User Authentication:

Registration: Allowing users to create accounts.
Login: Authenticating users to access their tasks.
Task Management:

Create Task: Allowing users to add new tasks.
View Task List: Displaying a list of tasks.
Update Task: Allowing users to modify task details.
Delete Task: Removing tasks from the list.
Task Categories/Labels: Organizing tasks into categories.
User Profile:

View Profile: Displaying user information.
Edit Profile: Allowing users to update their profile details.
Change Password: Providing an option to change the password.
Notifications:

Task Reminders: Setting reminders for upcoming tasks.
Email/SMS Notifications: Notifying users about task updates.
Collaboration:

Task Sharing: Allowing users to share tasks with others.
Comments/Notes: Adding comments or notes to tasks.
Search and Filtering:

Search Tasks: Enabling users to search for specific tasks.
Filter Tasks: Sorting tasks based on different criteria.
Settings:

Theme Selection: Allowing users to choose app themes.
Notification Preferences: Customizing notification settings.
Security:

Access Control: Managing user roles and permissions.
Secure Authentication: Implementing secure login mechanisms.
Reports and Analytics:

Task Completion Statistics: Providing insights into completed tasks.
Productivity Reports: Analyzing user productivity.
Sync Across Devices:

Cloud Integration: Synchronizing tasks across multiple devices.
Backup and Restore:

Data Backup: Allowing users to backup their task data.
Restore: Restoring data from backups.
Integration with External Tools:

Calendar Integration: Syncing tasks with calendar apps.
Third-Party App Integration: Connecting with other productivity tools.
Feedback and Support:

Feedback Form: Collecting user feedback.
Help and Support: Providing user assistance.
These modules can be implemented as separate components or functionalities within the task manager app. The choice of modules depends on the specific requirements and goals of the app.

====================================================

Admin will assign task to users
- there will two type of user ie (Admin and User)

1. No user will get more the two task.
2. Only login user can view his account.

=====================================================
npm i dotenv



